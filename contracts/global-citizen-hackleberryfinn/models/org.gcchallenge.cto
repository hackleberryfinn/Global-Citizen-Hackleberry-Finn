/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Write your model definitions here
 */

namespace org.gcchallenge

enum Cluster{
  o GIRLSANDWOMEN
  o HEALTH
  o EDUCATION
  o FINANCEANDINNOVATION
  o FOODANDHUNGER
  o WATERANDSANITATION
  o ENVIRONMENT
  o CITIZENSHIP
}

enum Status{
  o INITIALSTATE
  o GLOBALCITIZENREVIEW
  o GOVORGREVIEW
  o PROPOSALFUNDED
}

enum FundingType{
  o WEEKLY
  o MONTHLY
  o SEMIANNUALY
  o ANNUALY
}

enum FundingStatus{
  o COMPLETE
  o INCOMPLETE
}

enum MessageStatus{
  o NOTREVIEWED
  o REVIEWED
}

concept Funding {
  o FundingType fundingType  
  o Integer nextFundingDueInDays
  o Double approvedFunding
  o Double totalFundsReceived
  o Double fundsPerInstallment
  --> GovOrg govOrgId
}

asset Cause identified by causeId {
  o String causeId
  o String name
  o String description
  --> GlobalCitizen citizenId
}

asset Need identified by needId {
  o String needId
  o String description
  --> Cause causeId
  --> Community community
}

asset ProjectPledge identified by pledgeId {
  o String pledgeId
  o String name
  o String decription
  o Double fundsRequired
  o Status status
  o Cluster clusterId
  --> AidOrg aidOrg
  --> Need needId
  o Funding[] funds
}

abstract participant User {
  --> ProjectPledge[] projectPledge
}

participant GovOrg identified by govOrgId extends User {
  o String govOrgId
  --> ProjectPledge[] fundedPledges
}

participant AidOrg identified by aidOrgId extends User {
  o String aidOrgId
}

participant GlobalCitizen identified by citizenId extends User {
  o String citizenId
}

participant Community identified by communityId extends User {
  o String communityId
}

participant Reporter identified by reporterId extends User {
  o String reporterId
}

transaction CreateProjectPledge {
  o String pledgeId
  o String name
  o String decription
  o Double fundsRequired
  --> AidOrg aidOrg
}

transaction SendPledgeToGlobalCitizen {
  --> GlobalCitizen citizenId
  --> ProjectPledge pledgeId
}

transaction SendPledgeToGovOrg {
  --> GovOrg[] govOrg
  --> ProjectPledge pledgeId
}

transaction UpdatePledge {
  --> GovOrg govOrgId
  --> ProjectPledge pledgeId
  o FundingType fundingType
  o Double approvedFunding
  o Double fundsPerInstallment
}

transaction TransferFunds {
  --> GovOrg govOrgId
  --> ProjectPledge pledgeId
}